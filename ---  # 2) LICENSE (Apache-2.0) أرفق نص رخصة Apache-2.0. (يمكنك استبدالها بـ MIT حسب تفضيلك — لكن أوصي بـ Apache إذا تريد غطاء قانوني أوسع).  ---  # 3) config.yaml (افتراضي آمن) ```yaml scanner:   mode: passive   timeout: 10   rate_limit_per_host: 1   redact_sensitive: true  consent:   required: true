# 1. إنشاء مجلد جديد
mkdir Qadr-CLI && cd Qadr-CLI

# 2. تهيئة git
git init

# 3. إضافة الملفات
git add .

# 4. أول كوميت
git commit -m "Initial commit: Qadr CLI with Apache 2.0 License"

# 5. ربط مع GitHub (غيّر الرابط للمستودع الخاص بك)
git remote add origin https://github.com/USERNAME/Qadr-CLI.git

# 6. رفع المشروع
git push -u origin master
git init
git add .
git commit -m "Initial commit – QADR CLI"
git branch -M main
git remote add origin https://github.com/YourUsername/qadr-cli.git
---

### 4️⃣ setup.sh مبسط للبيئة متعددة اللغات

```bash
#!/bin/bash
# تثبيت dependencies
pip install -r requirements.txt
npm install
echo "✅ البيئة جاهزة"
#!/bin/bash
# Git helper: commit + auto badge + safety check

# فحص الأكواد (Python/Node)
echo "🔍 فحص الأكواد..."
flake8 qadr/ || echo "⚠️ تحذير: بعض الأخطاء موجودة"
eslint qadr/ || echo "⚠️ تحذير JS"

# إضافة كل الملفات
git add .

# إنشاء commit تلقائي بالوقت الحالي
COMMIT_MSG="Auto commit: $(date '+%Y-%m-%d %H:%M:%S')"
git commit -m "$COMMIT_MSG" || echo "⚠️ لا توجد تغييرات"

# Push إلى origin main
git push origin main

# Badge: إنشاء ملف حالة أو تحديث README
BADGE_FILE="docs/badge_status.md"
echo "![QADR CLI Status](https://img.shields.io/badge/status-active-brightgreen)" > $BADGE_FILE
qadr-cli/
├─ .gitignore                  # تجاهل ملفات غير مهمة (env, logs, temp)
├─ LICENSE                     # رخصة Apache 2.0 أو AGPL حسب اختيارك
├─ README.md                   # وثائق المشروع مع ملاحظة الاستخدام القانوني
├─ CONTRIBUTING.md             # إرشادات للمساهمين
├─ CODE_OF_CONDUCT.md          # قواعد السلوك
├─ setup.sh                    # إعداد المشروع (Python/Node/CLI dependencies)
├─ git-optional-commit.sh      # سكربت commit ذكي مع تنبيهات أخطاء
├─ docs/
│  └─ architecture.md          # شرح المنطق البنيوي للـ CLI والـ multi-lang
├─ examples/
│  └─ safe_demo_localhost.sh   # أمثلة تشغيل آمنة
├─ qadr/
│  ├─ __init__.py
│  ├─ cli.py                   # CLI الرئيسي
│  ├─ scanner.py               # مهام scan آمنة ومصرح بها فقط
│  ├─ reporters.py             # إخراج تقارير بطريقة آمنة وموحدة
│  ├─ utils.py                 # أدوات مساعدة عامة ومتعددة اللغات
│  └─ multi_lang/
│       ├─ en.py               # دعم اللغة الإنجليزية
│       ├─ ar.py               # دعم اللغة العربية
│       └─ other.py             # لغات إضافية مستقبليًا
└─ tests/
   └─ test_scan_safety.py      # اختبارات وحدات وأمان
# افتح README.md وأضف السطر أسفل العنوان، ثم:
git add README.md
git commit -m "docs: soften wording and add single-line misuse responsibility notice"
git push
# في مجلد المشروع
git init
git add .
git commit -m "Initial: SULTAN-GHOST-CONSOLE project layout (Apache-2.0)"
git branch -M main
# اضف الريموت المناسب (SSH/HTTPS)
git remote add origin git@github.com:youruser/qadr-cli.git
git push -u origin main
node_modules/
dist/
.env
*.log
local-secrets.json
.DS_Store
#!/usr/bin/env bash
set -e
echo "Setting up repository (local)."
# placeholder: install tools used by your Python parts or helpers
# e.g., python -m pip install -r requirements.txt
echo "Nothing to install for web console demo. See README."
# Qadr — SULTAN-GHOST-CONSOLE (Web / Console)

**Super decentralized AI analyzer (console-only, offline-capable)**

> ⚠️ Legal & Ethics: This project is intended for **legitimate security research and defensive** use only. Do **not** use it to bypass protections or attack systems you do not explicitly own or have written permission to test.

## What this repo contains
- `web/super.js` — Browser-console entry: SULTAN-GHOST-CONSOLE (local-first, encrypted storage).
- `qadr/` — CLI core (Python) and geo module (BLE/osint scaffolding).
- `docs/architecture.md` — Design and security model.
- `examples/` — Safe demo scripts (localhost only).

## Quickstart (browser console)
1. Open a browser devtools console on a page you **own** or a local test page.
2. Paste the content of `web/super.js` and press Enter.
3. Follow on-screen prompts. **Do not** run against third-party sites without permission.

## Contributing & License
- License: Apache-2.0 (see `LICENSE`).
- See `CONTRIBUTING.md` and `CODE_OF_CONDUCT.md`.
# Qadr — SULTAN-GHOST-CONSOLE (Web / Console)

**Super decentralized AI analyzer (console-only, offline-capable)**

> ⚠️ Legal & Ethics: This project is intended for **legitimate security research and defensive** use only. Do **not** use it to bypass protections or attack systems you do not explicitly own or have written permission to test.

## What this repo contains
- `web/super.js` — Browser-console entry: SULTAN-GHOST-CONSOLE (local-first, encrypted storage).
- `qadr/` — CLI core (Python) and geo module (BLE/osint scaffolding).
- `docs/architecture.md` — Design and security model.
- `examples/` — Safe demo scripts (localhost only).

## Quickstart (browser console)
1. Open a browser devtools console on a page you **own** or a local test page.
2. Paste the content of `web/super.js` and press Enter.
3. Follow on-screen prompts. **Do not** run against third-party sites without permission.

## Contributing & License
- License: Apache-2.0 (see `LICENSE`).
- See `CONTRIBUTING.md` and `CODE_OF_CONDUCT.md`.
if args.target:
    result = scanner.scan_target(args.target)
    if args.json:
        print(reporters.to_json(result))
    else:
        print(reporters.to_text(result))
---

🔹 الكود أعلاه يمثل مشروعك **كامل + منظم + احترافي** بنص واحد.  
تقدر تنسخه مباشرة، تلصقه في مشروع جديد محلي، ثم تعمل:  

```bash
git init
git add .
git commit -m "initial QADR CLI structure"
git branch -M main
git remote add origin https://github.com/Abdiifahman/QADR-CLI.git
git push -u origin main
scanner:
  mode: passive         # passive | active | hybrid
  timeout: 10           # seconds
  rate_limit_per_host: 1
  redact_sensitive: true
  output_format: json   # json | text | html

consent:
  required: true
  disclaimer: "For authorized and legal use only"

logging:
  level: info           # debug | info | warning | error
  save_to_file: true

mkdir qadr-cli && cd qadr-cli
# 📂 إنشاء مجلد المشروع
mkdir qadr-cli && cd qadr-cli

# ==============================
# 1) qadr_cli.py (الكود الرئيسي)
# ==============================
cat > qadr_cli.py << 'EOF'
#!/usr/bin/env python3
# QADR CLI - Unified Analyzer
# License: Apache-2.0
# Author: Abdiifahman (SULTAN-GHOST-CONSOLE)

import argparse
import asyncio
import json
import os
import requests
from rich.console import Console
from collections import Counter
from bleak import BleakScanner, BleakClient
from google.cloud import storage
import subprocess

console = Console()

# ======================
# إعداد Google Cloud Storage
# ======================
def init_gcs(bucket_name="qadr-cli-data"):
    try:
        client = storage.Client()
        bucket = client.bucket(bucket_name)
        return bucket
    except Exception as e:
        console.print(f"[red]فشل الاتصال بـ GCS: {e}[/red]")
        return None

def upload_to_gcs(bucket, filename, data):
    if not bucket:
        return
    try:
        blob = bucket.blob(filename)
        blob.upload_from_string(json.dumps(data, ensure_ascii=False, indent=2))
        console.print(f"[green]تم رفع {filename} إلى GCS[/green]")
    except Exception as e:
        console.print(f"[red]فشل رفع الملف {filename}: {e}[/red]")

# ======================
# BLE Functions
# ======================
async def scan_ble(timeout=5):
    console.print("[bold green]🔍 جاري البحث عن أجهزة BLE...[/bold green]")
    devices = await BleakScanner.discover(timeout=timeout)
    results = [{"name": d.name, "address": d.address, "rssi": d.rssi} for d in devices]
    for d in results:
        console.print(f"[yellow]{d['name']}[/yellow] - {d['address']} (RSSI: {d['rssi']})")
    return results

async def connect_ble(address):
    try:
        async with BleakClient(address) as client:
            connected = await client.is_connected()
            console.print(f"[bold blue]تم الاتصال بـ {address}: {connected}[/bold blue]")
            return True
    except Exception as e:
        console.print(f"[red]فشل الاتصال: {e}[/red]")
        return False

# ======================
# Tor Proxy Utilities
# ======================
def tor_socks_up(host="127.0.0.1", port=9050):
    import socket
    s = socket.socket()
    try:
        s.settimeout(1)
        s.connect((host, port))
        s.close()
        return True
    except Exception:
        return False

def start_tor(tor_bin="tor", data_dir=".tor-data"):
    try:
        os.makedirs(data_dir, exist_ok=True)
        return subprocess.Popen([tor_bin, f"--DataDirectory", data_dir], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except Exception as e:
        console.print(f"[red]Tor start error: {e}[/red]")
        return None

# ======================
# OSINT Functions
# ======================
def fetch_osint(urls, use_tor=False):
    results = []
    sess = requests.Session()
    if use_tor:
        if not tor_socks_up():
            console.print("[yellow]Tor غير متصل، سيتم المحاولة بدونه[/yellow]")
        else:
            sess.proxies = {
                "http": "socks5h://127.0.0.1:9050",
                "https": "socks5h://127.0.0.1:9050"
            }
            console.print("[green]تم تفعيل Tor proxy[/green]")

    for url in urls:
        try:
            r = sess.get(url, timeout=10, headers={"User-Agent": "qadr-cli/1.0"})
            data = {
                "url": url,
                "status_code": r.status_code,
                "content_length": len(r.text),
            }
            results.append(data)
            console.print(f"[green]تم جمع البيانات من {url}[/green]")
        except Exception as e:
            console.print(f"[red]فشل الوصول إلى {url}: {e}[/red]")
    return results

# ======================
# Analyzer
# ======================
def analyze_data(records):
    agg = {
        "records_count": len(records),
        "domains": Counter(),
        "urls": Counter(),
        "emails": Counter(),
        "phones": Counter(),
    }
    per_record = []
    for rec in records:
        per_record.append(rec)
    return {"summary": agg, "per_record": per_record}

# ======================
# CLI Main
# ======================
def main():
    parser = argparse.ArgumentParser(description="QADR CLI - Unified Analyzer (BLE + OSINT + GCP + Tor)")
    parser.add_argument("--ble", action="store_true", help="Scan for BLE devices")
    parser.add_argument("--osint", nargs="+", help="Fetch OSINT data from URLs")
    parser.add_argument("--tor", action="store_true", help="Route OSINT requests via Tor")
    parser.add_argument("--gcs-bucket", default="qadr-cli-data", help="Google Cloud Storage bucket name")
    parser.add_argument("--out", default="qadr_output.json", help="Output JSON file")
    args = parser.parse_args()

    console.print("[bold cyan]🚀 تشغيل QADR CLI...[/bold cyan]")

    output = {}

    # BLE
    if args.ble:
        devices = asyncio.run(scan_ble())
        output["ble_devices"] = devices
        if devices:
            asyncio.run(connect_ble(devices[0]["address"]))

    # OSINT
    if args.osint:
        osint_data = fetch_osint(args.osint, use_tor=args.tor)
        output["osint"] = osint_data

    # تحليل مبدئي
    output["analysis"] = analyze_data(output.get("osint", []))

    # حفظ محلي
    with open(args.out, "w", encoding="utf-8") as f:
        json.dump(output, f, ensure_ascii=False, indent=2)
    console.print(f"[green]📁 تم حفظ النتائج في {args.out}[/green]")

    # رفع GCS
    bucket = init_gcs(args.gcs_bucket)
    if bucket:
        upload_to_gcs(bucket, args.out, output)

if __name__ == "__main__":
    main()
EOF

# ==============================
# 2) requirements.txt
# ==============================
cat > requirements.txt << 'EOF'
requests
rich
bleak
google-cloud-storage
EOF

# ==============================
# 3) setup.sh
# ==============================
cat > setup.sh << 'EOF'
#!/bin/bash
# QADR CLI Installer

echo "[*] Installing dependencies..."
pip install -r requirements.txt

echo "[*] Making qadr_cli.py executable..."
chmod +x qadr_cli.py

echo "[*] Creating symlink to /usr/local/bin/qadr"
sudo ln -sf $(pwd)/qadr_cli.py /usr/local/bin/qadr

echo "[*] Done! Now you can run QADR CLI by typing: qadr"
EOF

chmod +x setup.sh

# ==============================
# 4) تفعيل الأداة
# ==============================
bash setup.sh

# ==============================
# 5) تشغيل أمثلة
# ==============================
# مسح أجهزة BLE
qadr --ble

# تشغيل OSINT مع Tor
qadr --osint https://example.com https://qadr.io --tor

# نتائج تتحفظ محلياً في qadr_output.json + ترفع لـ GCS

