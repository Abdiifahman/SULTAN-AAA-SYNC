# 1. إنشاء مجلد جديد
mkdir Qadr-CLI && cd Qadr-CLI

# 2. تهيئة git
git init

# 3. إضافة الملفات
git add .

# 4. أول كوميت
git commit -m "Initial commit: Qadr CLI with Apache 2.0 License"

# 5. ربط مع GitHub (غيّر الرابط للمستودع الخاص بك)
git remote add origin https://github.com/USERNAME/Qadr-CLI.git

# 6. رفع المشروع
git push -u origin master
git init
git add .
git commit -m "Initial commit – QADR CLI"
git branch -M main
git remote add origin https://github.com/YourUsername/qadr-cli.git
---

### 4️⃣ setup.sh مبسط للبيئة متعددة اللغات

```bash
#!/bin/bash
# تثبيت dependencies
pip install -r requirements.txt
npm install
echo "✅ البيئة جاهزة"
#!/bin/bash
# Git helper: commit + auto badge + safety check

# فحص الأكواد (Python/Node)
echo "🔍 فحص الأكواد..."
flake8 qadr/ || echo "⚠️ تحذير: بعض الأخطاء موجودة"
eslint qadr/ || echo "⚠️ تحذير JS"

# إضافة كل الملفات
git add .

# إنشاء commit تلقائي بالوقت الحالي
COMMIT_MSG="Auto commit: $(date '+%Y-%m-%d %H:%M:%S')"
git commit -m "$COMMIT_MSG" || echo "⚠️ لا توجد تغييرات"

# Push إلى origin main
git push origin main

# Badge: إنشاء ملف حالة أو تحديث README
BADGE_FILE="docs/badge_status.md"
echo "![QADR CLI Status](https://img.shields.io/badge/status-active-brightgreen)" > $BADGE_FILE
qadr-cli/
├─ .gitignore                  # تجاهل ملفات غير مهمة (env, logs, temp)
├─ LICENSE                     # رخصة Apache 2.0 أو AGPL حسب اختيارك
├─ README.md                   # وثائق المشروع مع ملاحظة الاستخدام القانوني
├─ CONTRIBUTING.md             # إرشادات للمساهمين
├─ CODE_OF_CONDUCT.md          # قواعد السلوك
├─ setup.sh                    # إعداد المشروع (Python/Node/CLI dependencies)
├─ git-optional-commit.sh      # سكربت commit ذكي مع تنبيهات أخطاء
├─ docs/
│  └─ architecture.md          # شرح المنطق البنيوي للـ CLI والـ multi-lang
├─ examples/
│  └─ safe_demo_localhost.sh   # أمثلة تشغيل آمنة
├─ qadr/
│  ├─ __init__.py
│  ├─ cli.py                   # CLI الرئيسي
│  ├─ scanner.py               # مهام scan آمنة ومصرح بها فقط
│  ├─ reporters.py             # إخراج تقارير بطريقة آمنة وموحدة
│  ├─ utils.py                 # أدوات مساعدة عامة ومتعددة اللغات
│  └─ multi_lang/
│       ├─ en.py               # دعم اللغة الإنجليزية
│       ├─ ar.py               # دعم اللغة العربية
│       └─ other.py             # لغات إضافية مستقبليًا
└─ tests/
   └─ test_scan_safety.py      # اختبارات وحدات وأمان
# افتح README.md وأضف السطر أسفل العنوان، ثم:
git add README.md
git commit -m "docs: soften wording and add single-line misuse responsibility notice"
git push
# في مجلد المشروع
git init
git add .
git commit -m "Initial: SULTAN-GHOST-CONSOLE project layout (Apache-2.0)"
git branch -M main
# اضف الريموت المناسب (SSH/HTTPS)
git remote add origin git@github.com:youruser/qadr-cli.git
git push -u origin main
node_modules/
dist/
.env
*.log
local-secrets.json
.DS_Store
#!/usr/bin/env bash
set -e
echo "Setting up repository (local)."
# placeholder: install tools used by your Python parts or helpers
# e.g., python -m pip install -r requirements.txt
echo "Nothing to install for web console demo. See README."
# Qadr — SULTAN-GHOST-CONSOLE (Web / Console)

**Super decentralized AI analyzer (console-only, offline-capable)**

> ⚠️ Legal & Ethics: This project is intended for **legitimate security research and defensive** use only. Do **not** use it to bypass protections or attack systems you do not explicitly own or have written permission to test.

## What this repo contains
- `web/super.js` — Browser-console entry: SULTAN-GHOST-CONSOLE (local-first, encrypted storage).
- `qadr/` — CLI core (Python) and geo module (BLE/osint scaffolding).
- `docs/architecture.md` — Design and security model.
- `examples/` — Safe demo scripts (localhost only).

## Quickstart (browser console)
1. Open a browser devtools console on a page you **own** or a local test page.
2. Paste the content of `web/super.js` and press Enter.
3. Follow on-screen prompts. **Do not** run against third-party sites without permission.

## Contributing & License
- License: Apache-2.0 (see `LICENSE`).
- See `CONTRIBUTING.md` and `CODE_OF_CONDUCT.md`.
# Qadr — SULTAN-GHOST-CONSOLE (Web / Console)

**Super decentralized AI analyzer (console-only, offline-capable)**

> ⚠️ Legal & Ethics: This project is intended for **legitimate security research and defensive** use only. Do **not** use it to bypass protections or attack systems you do not explicitly own or have written permission to test.

## What this repo contains
- `web/super.js` — Browser-console entry: SULTAN-GHOST-CONSOLE (local-first, encrypted storage).
- `qadr/` — CLI core (Python) and geo module (BLE/osint scaffolding).
- `docs/architecture.md` — Design and security model.
- `examples/` — Safe demo scripts (localhost only).

## Quickstart (browser console)
1. Open a browser devtools console on a page you **own** or a local test page.
2. Paste the content of `web/super.js` and press Enter.
3. Follow on-screen prompts. **Do not** run against third-party sites without permission.

## Contributing & License
- License: Apache-2.0 (see `LICENSE`).
- See `CONTRIBUTING.md` and `CODE_OF_CONDUCT.md`.
if args.target:
    result = scanner.scan_target(args.target)
    if args.json:
        print(reporters.to_json(result))
    else:
        print(reporters.to_text(result))
---

🔹 الكود أعلاه يمثل مشروعك **كامل + منظم + احترافي** بنص واحد.  
تقدر تنسخه مباشرة، تلصقه في مشروع جديد محلي، ثم تعمل:  

```bash
git init
git add .
git commit -m "initial QADR CLI structure"
git branch -M main
git remote add origin https://github.com/Abdiifahman/QADR-CLI.git
git push -u origin main